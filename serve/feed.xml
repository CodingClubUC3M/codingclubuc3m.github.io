<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Club UC3M</title>
    <description>A blog devoted mostly to the teaching of undergraduate-level statstics and data analysis with R, along with occasional technical notes on R-related tools.
</description>
    <link>https://codingclubuc3m.github.io/</link>
    <atom:link href="https://codingclubuc3m.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>2016-10-13 18:24:51 +0200</pubDate>
    <lastBuildDate>2016-10-13 18:24:51 +0200</lastBuildDate>
    <generator>Jekyll v</generator>
    
      <item>
        <title>How to create your very first post with Rmarkdown and Knitr</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;We usually write a lot of codes everyday. However, most of them are commands and not commented properly. As the consequence, it might take a lot of time to understand our own writing when we review them some months later.&lt;/p&gt;

&lt;p&gt;Fortunately, Rmarkdown is an useful tool to create a reproducible research. In order to start writing a readable document. First you need to choose from the menu: &lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;New File&lt;/em&gt; -&amp;gt; &lt;em&gt;R markdown&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the new pop-up, choose the file type you want and click &lt;strong&gt;OK&lt;/strong&gt; and you will have a new document that is ready to be modified.
You could click on the &lt;em&gt;Knit button&lt;/em&gt; in the menu bar to see how thing looks like.&lt;/p&gt;

&lt;h1 id=&quot;some-examples&quot;&gt;Some examples&lt;/h1&gt;

&lt;p&gt;Here I include some examples from ggplot2:&lt;/p&gt;

&lt;h2 id=&quot;iris-data&quot;&gt;Iris data&lt;/h2&gt;
&lt;p&gt;We plot the iris data as follows:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
        geom_point(size=3)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/figure/source/2016-10-1-Blogging-with-Rmarkdown-and-knitr/ggplot_iris-1.png&quot; title=&quot;center&quot; alt=&quot;center&quot; style=&quot;display: block; margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How about a regression line &lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;reg_sepal &amp;lt;- lm(Sepal.Length ~ Petal.Width, data = iris)
summary(reg_sepal)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;text&quot;&gt;## 
## Call:
## lm(formula = Sepal.Length ~ Petal.Width, data = iris)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -1.38822 -0.29358 -0.04393  0.26429  1.34521 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  4.77763    0.07293   65.51   &amp;lt;2e-16 ***
## Petal.Width  0.88858    0.05137   17.30   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 0.478 on 148 degrees of freedom
## Multiple R-squared:  0.669,	Adjusted R-squared:  0.6668 
## F-statistic: 299.2 on 1 and 148 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;ggplot(iris, aes(x = Petal.Width, y = Sepal.Length, color=Species)) + 
  geom_point() +
  stat_smooth(method = &amp;quot;lm&amp;quot;, col = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/figure/source/2016-10-1-Blogging-with-Rmarkdown-and-knitr/ggplot_reg-1.png&quot; title=&quot;center&quot; alt=&quot;center&quot; style=&quot;display: block; margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;publish-to-github-respository&quot;&gt;Publish to github respository&lt;/h1&gt;
&lt;p&gt;Now we want to share our work as a blog post. We need to convert the Rmd file into md file in order for jekyll to understand.
First please add this instruction to the Rmarkdown header&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;layout: post&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And also we could create tag to the post as&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;categories: [Rmarkdown, jekyll, Knitr]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have something like this
&lt;img src=&quot;/figure/source/2016-10-1-Blogging-with-Rmarkdown-and-knitr/header.png&quot; alt=&quot;&quot; /&gt; &lt;/p&gt;

&lt;p&gt;We also need to separate the figure generated by the Rmarkdown, so try this one&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;KnitPost &amp;lt;- function(input, base.url = &amp;quot;/&amp;quot;) {
    require(knitr)
    opts_knit$set(base.url = base.url)
    fig.path &amp;lt;- paste0(&amp;quot;figure/source/&amp;quot;, sub(&amp;quot;.Rmd$&amp;quot;, &amp;quot;&amp;quot;, basename(input)), &amp;quot;/&amp;quot;)
    opts_chunk$set(fig.path = fig.path)
    opts_chunk$set(fig.cap = &amp;quot;center&amp;quot;)
    render_jekyll()
    knit(input, envir = parent.frame())
}
# And after that you could use knitr to create your own post
# 

KnitPost(&amp;quot;2016-10-1-Blogging-with-Rmarkdown-and-knitr.Rmd&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you have the md file together with all the images in the img folder. Let’s upload to github folder. &lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;git status
git add -A
git commit -m &amp;quot;New post 10/2016&amp;quot;
git push&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>2016-10-01 00:00:00 +0200</pubDate>
        <link>https://codingclubuc3m.github.io/2016/10/01/Blogging-with-Rmarkdown-and-knitr.html</link>
        <guid isPermaLink="true">https://codingclubuc3m.github.io/2016/10/01/Blogging-with-Rmarkdown-and-knitr.html</guid>
        
        
        <category>Rmarkdown</category>
        
        <category>jekyll</category>
        
        <category>Knitr</category>
        
      </item>
    
      <item>
        <title>Installing the Addinplots Package </title>
        <description>&lt;p&gt;This is a quick note for instructors interested in installing the &lt;code&gt;addinplots&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;First of all, you need a recent version of RStudio that enables Addins.  At the time of writing this is version 0.99.891.&lt;/p&gt;

&lt;p&gt;You’ll need several packages from CRAN, so run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
install.packages(c(&quot;devtools&quot;,&quot;shiny&quot;,&quot;miniUI&quot;,
                   &quot;Hmisc&quot;,&quot;rstudioapi&quot;,&quot;lattice&quot;,&quot;devtools&quot;))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run this even if you already have some of these packages:  you will need up-to-date versions.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;devtools&lt;/code&gt; package allows you to install packages from GitHub.  Run the following two commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
devtools::install_github(&quot;homerhanumat/shinyCustom&quot;)
devtools::install_github(&quot;homerhanumat/addinplots&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;addinplots&lt;/code&gt; package is now installed.  Refer to the previous post for details on use.&lt;/p&gt;

</description>
        <pubDate>2016-03-11 19:00:00 +0100</pubDate>
        <link>https://codingclubuc3m.github.io/2016/03/11/rstudio-addinplots-installation.html</link>
        <guid isPermaLink="true">https://codingclubuc3m.github.io/2016/03/11/rstudio-addinplots-installation.html</guid>
        
        
        <category>Tech Notes</category>
        
      </item>
    
      <item>
        <title>RStudio Addin Code-Helpers for Plotting</title>
        <description>&lt;p&gt;There are many benefits to teaching undergraduate statistics with R–especially in the RStudio environment–but it must be admitted that the learning curve is fairly steep, especially when it comes to tinkering with plots to get them to look just the way one wants.  If there were ever a situation when I would prefer that the students have access to a graphical user interface, production of plots would be it.&lt;/p&gt;

&lt;p&gt;You can, of course, write Shiny apps like &lt;a href=&quot;https://homer.shinyapps.io/bwplotAddin/&quot;&gt;this one&lt;/a&gt;, where the user controls features of the graphs through various input-widgets.  But then the user must visit the remote site, and if he or she wishes to build a graph from a data frame not supplied by the app, then the app has to deal with thorny issues surrounding the uploading and processing of .csv files, and in the end the user still has to copy and paste the relevant graph-making code back to wherever it was needed.&lt;/p&gt;

&lt;p&gt;It would be much nicer if all of this could be accomplished locally.  &lt;code&gt;mPlot()&lt;/code&gt; in &lt;a href=&quot;https://cran.r-project.org/web/packages/mosaic/index.html&quot;&gt;package &lt;code&gt;mosaic&lt;/code&gt;&lt;/a&gt; does a great job in this respect by taking advantage of RStudio’s &lt;code&gt;manipulate&lt;/code&gt; package.  However, &lt;code&gt;manipulate&lt;/code&gt; doesn’t offer much flexibility in terms of control of inputs, so it’s not feasible within the &lt;code&gt;manipulate&lt;/code&gt; framework to write a code-helper that allows much fine-tuning one’s plot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rstudio.github.io/rstudioaddins/&quot;&gt;Addins&lt;/a&gt; (a new feature in the current RStudio &lt;a href=&quot;https://www.rstudio.com/products/rstudio/download/preview/&quot;&gt;Preview Version&lt;/a&gt;) permit us to have the best of both worlds.  An Addin works like a locally-run Shiny app.  As such it can draw on information available in the user’s R session, and it can return information directly to where the user needs it in a source document such as an R script or R Markdown file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/homerhanumat/addinplots&quot;&gt;addinplots&lt;/a&gt; is a package of Addins, each of which is a code-helper for a particular type of plot in the &lt;code&gt;lattice&lt;/code&gt; graphing system.  The intention is to help students (and colleagues who are newcomers to &lt;code&gt;lattice&lt;/code&gt;) to make reasonably well-customized graphs while teaching–through example–the rudiments of the coding principles of the &lt;code&gt;lattice&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;If you are using the Preview version of RStudio and would like to give these Addins a try, then follow the installation directions in the &lt;a href=&quot;http://rstudio.github.io/rstudioaddins/&quot;&gt;article cited above&lt;/a&gt;.  In addition, install my package and one of its dependencies, as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
devtools::install_github(&quot;homerhanumat/shinyCustom&quot;)
devtools::install_github(&quot;homerhanumat/addinplots&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To use an Addin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type the name of a data frame into an R script, or inside a code chunk in an R Markdown document.&lt;/li&gt;
  &lt;li&gt;Select the name.&lt;/li&gt;
  &lt;li&gt;Go to the Addins button and pick the Addin for the plot you wish to make.&lt;/li&gt;
  &lt;li&gt;The Addin will walk you through the process of constructing a graph based upon variables in your data frame.  At each step you see the graph to that point, along with R-code to produce said graph.&lt;/li&gt;
  &lt;li&gt;When you are happy with your graph press the Done button. The app will go dark.&lt;/li&gt;
  &lt;li&gt;Close the app tab and return to RStudio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will see that the code for your graph has been inserted in place of the name of the data frame.&lt;/p&gt;

&lt;p&gt;These Addins are flexible enough to handle the everyday needs of beginning students in undergraduate statistics classes, but they only scratch the surface of &lt;code&gt;lattice&lt;/code&gt;’s capability.  Eventually students should graduate to coding directly with &lt;code&gt;lattice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My Addins are scarcely more than toys, and clunky ones at that.  I imagine that before long other folks will have written a host of Addins that accomplish some quite sophisticated tasks and make the R environment much more “GUI.”  I’m excited to see what will happen.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note on addinplot performance&lt;/em&gt;:  My Addins are intended for use in a classroom setting where the entire class is working on a single not-so-powerful RStudio server.  Accordingly many of the input controls have been customized to inhibit their propensity to update.  When you are entering text or a number, you need to press Enter or shift focus away from the input area in order to cue the machine to update your information.  You will also note (in the &lt;code&gt;cloudplotAddin&lt;/code&gt;) that sliders take a bit longer to “respond”.  These input-damping behaviors, enabled by the &lt;a href=&quot;https://github.com/homerhanumat/shinyCustom&quot;&gt;&lt;code&gt;shinyCustom&lt;/code&gt;&lt;/a&gt; package, prevent the Server from being overwhelmed by numerous requests for expensive graph-computations that most users don’t really want.&lt;/p&gt;

</description>
        <pubDate>2016-01-21 19:00:00 +0100</pubDate>
        <link>https://codingclubuc3m.github.io/2016/01/21/rstudio-addin-code-helpers-for-plotting.html</link>
        <guid isPermaLink="true">https://codingclubuc3m.github.io/2016/01/21/rstudio-addin-code-helpers-for-plotting.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>An Easy Start with Jekyll, for R-Bloggers</title>
        <description>&lt;p&gt;I would like my upper-level students to get more practice in writing about their data analysis work (well, to get get more practice in writing, generally).  Blogging is one device by which students can be motivated to write carefully, with a particular audience in mind. So why not have students blog about aspects of their R-work?&lt;/p&gt;

&lt;p&gt;Students need cheap hosting:  as long as they know their way around git and Git Hub, then Git Hub Pages are a great (free) solution for that.  But then of course they have to use Jekyll, think about web design issues, etc., and on top of that if they plan to blog seriously about R they are probably going to want to write from an R Markdown source document rather than from Markdown.&lt;/p&gt;

&lt;p&gt;All of this requires a lot of thinking about technical tools, at a time when students should focus as much as possible on fundamentals.  Learning R is already enough of a technical challenge!  Hence I decided to cobble together a framework that flattens the learning curve for students as much as possible.&lt;/p&gt;

&lt;p&gt;Yihui Xie’s &lt;a href=&quot;https://github.com/yihui/servr&quot;&gt;&lt;code&gt;servr&lt;/code&gt;&lt;/a&gt; package and &lt;a href=&quot;https://github.com/yihui/knitr-jekyll&quot;&gt;knitr-jekyll&lt;/a&gt; code are a great way to address the R Markdown issue and to keep Jekyll in the background.&lt;/p&gt;

&lt;p&gt;The remaining concern is site layout and styling.  For this I chose to work from Mark Otto’s excellent &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I added a few bells and whistles in the form of options for Disqus commenting and a couple of social media share buttons.  It ain’t much but it will get the students going, I hope.&lt;/p&gt;

&lt;p&gt;And it occurs to me that if you yourself are not yet a blogger then you might want to give my system a try.  The project repository is &lt;a href=&quot;https://github.com/homerhanumat/knitr-hyde&quot;&gt;here&lt;/a&gt;,  The resulting site (with directions for use) is &lt;a href=&quot;https://homerhanumat.github.io/knitr-hyde&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the future it would be interesting to investigate more modular ways of hooking Xihui’s &lt;code&gt;knitr-jekyll&lt;/code&gt; to other Jekyll projects, e.g., &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;.  If you are aware of any efforts along these lines, please let me know.&lt;/p&gt;
</description>
        <pubDate>2015-12-15 21:00:00 +0100</pubDate>
        <link>https://codingclubuc3m.github.io/2015/12/15/jekyll-r-blogger-knitr-hyde.html</link>
        <guid isPermaLink="true">https://codingclubuc3m.github.io/2015/12/15/jekyll-r-blogger-knitr-hyde.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>A Tutorial on Writing Simulation Apps in Shiny</title>
        <description>&lt;p&gt;(&lt;strong&gt;Edited November 25, 2015.&lt;/strong&gt;)  I stand in awe of the R wizards who post their latest and greatest &lt;a href=&quot;http://shiny.rstudio.com&quot; target=&quot;_blank&quot;&gt;Shiny&lt;/a&gt; feats on R-Bloggers.  It’s taken me a while to find my way around Shiny, but at last I feel ready to fill in a few gaps for others who may be just starting out and who aspire to write reasonably involved, user-friendly simulation apps.  To make it a bit more fun I’ve written it up as an R Markdown document.&lt;/p&gt;

&lt;p&gt;I used to host the document on &lt;code&gt;shinyapps.io&lt;/code&gt;, but it pushed my monthly hours over their limit.  You can get the source code, however, from the &lt;a href=&quot;https://github.com/homerhanumat/shinyTutorials&quot; target=&quot;_blank&quot;&gt;GitHub repository&lt;/a&gt;.  Check the repo’s Readme for prerequisites and instructions on access.&lt;/p&gt;

&lt;p&gt;If you have feedback or suggestions for improvements, comment here or post an Issue on the GitHub site.  Happy learning!&lt;/p&gt;
</description>
        <pubDate>2015-07-03 21:00:00 +0200</pubDate>
        <link>https://codingclubuc3m.github.io/2015/07/03/shiny-simulation-tutorial.html</link>
        <guid isPermaLink="true">https://codingclubuc3m.github.io/2015/07/03/shiny-simulation-tutorial.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>Google Charts in R Markdown</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extrapolation&quot;&gt;Extrapolation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;An excellent little post (&lt;a href=&quot;http://lamages.blogspot.com/2014/09/zoom-zoom-googlevis.html&quot;&gt;Zoom, zoom googleVis&lt;/a&gt;) showed up recently on &lt;a href=&quot;http://www.r-bloggers.com/&quot;&gt;R-Bloggers&lt;/a&gt;.  The author Markus Gesmann is the maintainer of the &lt;code&gt;googleVis&lt;/code&gt; package that links R to the &lt;a href=&quot;https://developers.google.com/chart/interactive/docs/gallery&quot;&gt;Google Charts API&lt;/a&gt;.  My first thought was:  could I embed charts like those in R Markdown documents that could knit to ioslides or other formats suitable for use in my elementary statistics classes?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A quick look at the documentation showed that it’s very easy indeed to do this sort of thing.&lt;/p&gt;

&lt;h2 id=&quot;extrapolation&quot;&gt;Extrapolation&lt;/h2&gt;

&lt;p&gt;Suppose, for example, that you want to illustrate to students the risks associated with extrapolation.  You begin by reminding them of the experience they had back in high school with their graphing calculators, when they zoomed in on a curve:  zoom in close enough, and it looks like a straight line.&lt;/p&gt;

&lt;p&gt;Then you point out that for the most part we live our lives from a “zoomed-in” perspective, at least where data is concerned.  In situations where we are interested in a pair of numerical measurements on individuals, we usually possess &lt;script type=&quot;math/tex&quot;&gt; y &lt;/script&gt;-values for only a fairly narrow range of &lt;script type=&quot;math/tex&quot;&gt; x &lt;/script&gt;-values.  Hence it is likely that a scatter plot we make from our “zoomed-in” data will show a roughly linear relationship, even though on a global scale the “real” relationship probably is some kind of a curve.&lt;/p&gt;

&lt;p&gt;The app below (a slight modification of the example in Gesmann’s post) makes the point in a flash.  Click and drag to establish a zoom region, right-click to reset:&lt;/p&gt;

&lt;!-- ScatterChart generated in R 3.2.2 by googleVis 0.5.10 package --&gt;
&lt;!-- Tue Dec 15 19:49:23 2015 --&gt;

&lt;!-- jsHeader --&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
 
// jsData 
function gvisDataZoomZoom () {
var data = new google.visualization.DataTable();
var datajson =
[
 [
 0,
2537.697212 
],
[
 0.5,
2480.404837 
],
[
 1,
2291.197683 
],
[
 1.5,
2239.20941 
],
[
 2,
2024.346568 
],
[
 2.5,
2328.30735 
],
[
 3,
2302.912102 
],
[
 3.5,
2139.312225 
],
[
 4,
2291.913135 
],
[
 4.5,
2081.986679 
],
[
 5,
1939.687718 
],
[
 5.5,
2071.175918 
],
[
 6,
2055.637296 
],
[
 6.5,
1855.09161 
],
[
 7,
1836.673977 
],
[
 7.5,
1986.254312 
],
[
 8,
1934.399588 
],
[
 8.5,
1418.373539 
],
[
 9,
1452.102505 
],
[
 9.5,
1646.080349 
],
[
 10,
1817.436525 
],
[
 10.5,
1670.068265 
],
[
 11,
1552.822032 
],
[
 11.5,
1474.935244 
],
[
 12,
1527.426874 
],
[
 12.5,
1426.125064 
],
[
 13,
1498.784138 
],
[
 13.5,
1425.921831 
],
[
 14,
1281.256681 
],
[
 14.5,
1271.293199 
],
[
 15,
1143.749534 
],
[
 15.5,
1115.879783 
],
[
 16,
1265.534507 
],
[
 16.5,
1365.787371 
],
[
 17,
1127.811847 
],
[
 17.5,
1085.312767 
],
[
 18,
995.4401713 
],
[
 18.5,
999.8514718 
],
[
 19,
904.9701396 
],
[
 19.5,
974.9688372 
],
[
 20,
990.8501134 
],
[
 20.5,
819.7440402 
],
[
 21,
810.8995988 
],
[
 21.5,
739.6464023 
],
[
 22,
665.9922973 
],
[
 22.5,
781.5574713 
],
[
 23,
691.9288703 
],
[
 23.5,
704.4679564 
],
[
 24,
742.0044122 
],
[
 24.5,
699.1293635 
],
[
 25,
606.1210083 
],
[
 25.5,
660.3859521 
],
[
 26,
508.6239947 
],
[
 26.5,
599.8550241 
],
[
 27,
540.8753228 
],
[
 27.5,
518.3726283 
],
[
 28,
465.3953206 
],
[
 28.5,
329.4228811 
],
[
 29,
384.3077049 
],
[
 29.5,
478.1333933 
],
[
 30,
590.9037231 
],
[
 30.5,
405.3257043 
],
[
 31,
201.1684941 
],
[
 31.5,
662.4131747 
],
[
 32,
419.5235375 
],
[
 32.5,
343.1144616 
],
[
 33,
381.2919068 
],
[
 33.5,
251.6978654 
],
[
 34,
265.2966701 
],
[
 34.5,
257.076218 
],
[
 35,
304.5839125 
],
[
 35.5,
374.8505607 
],
[
 36,
24.30756836 
],
[
 36.5,
150.4156894 
],
[
 37,
78.5860028 
],
[
 37.5,
85.85072033 
],
[
 38,
-33.80994618 
],
[
 38.5,
60.02448374 
],
[
 39,
125.615421 
],
[
 39.5,
134.6158021 
],
[
 40,
162.8331306 
],
[
 40.5,
87.78614177 
],
[
 41,
312.4153309 
],
[
 41.5,
89.97102573 
],
[
 42,
-38.44147667 
],
[
 42.5,
283.7181301 
],
[
 43,
-139.9056665 
],
[
 43.5,
151.6451601 
],
[
 44,
220.6167027 
],
[
 44.5,
82.35326735 
],
[
 45,
-128.2962108 
],
[
 45.5,
-173.6864969 
],
[
 46,
64.69165381 
],
[
 46.5,
136.7736691 
],
[
 47,
-12.72734263 
],
[
 47.5,
-71.70931145 
],
[
 48,
38.88744997 
],
[
 48.5,
70.422425 
],
[
 49,
-52.14613874 
],
[
 49.5,
-67.48934215 
],
[
 50,
-172.8783941 
],
[
 50.5,
-98.87609916 
],
[
 51,
-57.55055617 
],
[
 51.5,
40.6021748 
],
[
 52,
78.66649197 
],
[
 52.5,
-86.59209118 
],
[
 53,
-24.81762967 
],
[
 53.5,
166.7614015 
],
[
 54,
42.65088778 
],
[
 54.5,
50.20339324 
],
[
 55,
-7.280201955 
],
[
 55.5,
173.7847433 
],
[
 56,
136.6527204 
],
[
 56.5,
-129.6913636 
],
[
 57,
78.89204617 
],
[
 57.5,
-26.2225636 
],
[
 58,
-55.95898328 
],
[
 58.5,
-55.38871173 
],
[
 59,
68.68219333 
],
[
 59.5,
306.8442199 
],
[
 60,
68.77170251 
],
[
 60.5,
146.9939225 
],
[
 61,
247.9439261 
],
[
 61.5,
-94.23538391 
],
[
 62,
15.01500904 
],
[
 62.5,
175.0385938 
],
[
 63,
244.1642855 
],
[
 63.5,
360.7181336 
],
[
 64,
346.8271736 
],
[
 64.5,
114.9338291 
],
[
 65,
235.342274 
],
[
 65.5,
179.6939502 
],
[
 66,
246.2399374 
],
[
 66.5,
259.9051893 
],
[
 67,
184.5320483 
],
[
 67.5,
298.762966 
],
[
 68,
500.0135333 
],
[
 68.5,
199.0380413 
],
[
 69,
627.2201028 
],
[
 69.5,
251.1308468 
],
[
 70,
401.5101774 
],
[
 70.5,
416.2819428 
],
[
 71,
660.1440323 
],
[
 71.5,
264.606245 
],
[
 72,
530.3665665 
],
[
 72.5,
480.0287843 
],
[
 73,
415.4285494 
],
[
 73.5,
573.3799481 
],
[
 74,
585.9427928 
],
[
 74.5,
294.5816348 
],
[
 75,
590.2863346 
],
[
 75.5,
455.5873842 
],
[
 76,
654.3923354 
],
[
 76.5,
557.3303521 
],
[
 77,
763.5434061 
],
[
 77.5,
775.0702394 
],
[
 78,
671.2147217 
],
[
 78.5,
817.2950343 
],
[
 79,
772.7300908 
],
[
 79.5,
935.0553817 
],
[
 80,
961.0364487 
],
[
 80.5,
878.9843067 
],
[
 81,
1036.440589 
],
[
 81.5,
1011.060497 
],
[
 82,
831.1714369 
],
[
 82.5,
1179.832136 
],
[
 83,
1121.827731 
],
[
 83.5,
1036.758551 
],
[
 84,
966.4311784 
],
[
 84.5,
1274.919241 
],
[
 85,
1349.402511 
],
[
 85.5,
1283.875996 
],
[
 86,
1219.930646 
],
[
 86.5,
1409.472096 
],
[
 87,
1435.155675 
],
[
 87.5,
1246.876663 
],
[
 88,
1224.965309 
],
[
 88.5,
1364.574604 
],
[
 89,
1626.000513 
],
[
 89.5,
1559.679692 
],
[
 90,
1572.398767 
],
[
 90.5,
1725.102129 
],
[
 91,
1576.106534 
],
[
 91.5,
1548.891366 
],
[
 92,
2005.413909 
],
[
 92.5,
1786.685823 
],
[
 93,
1941.678696 
],
[
 93.5,
1820.903637 
],
[
 94,
1806.025829 
],
[
 94.5,
2068.67964 
],
[
 95,
2145.064152 
],
[
 95.5,
1953.216022 
],
[
 96,
2192.147189 
],
[
 96.5,
2249.259024 
],
[
 97,
2136.275729 
],
[
 97.5,
2318.912073 
],
[
 98,
2194.855727 
],
[
 98.5,
2300.640547 
],
[
 99,
2402.693396 
],
[
 99.5,
2516.349069 
],
[
 100,
2427.046688 
] 
];
data.addColumn('number','x');
data.addColumn('number','y');
data.addRows(datajson);
return(data);
}
 
// jsDrawChart
function drawChartZoomZoom() {
var data = gvisDataZoomZoom();
var options = {};
options[&quot;allowHtml&quot;] = true;
options[&quot;explorer&quot;] = {actions: ['dragToZoom',
                     'rightClickToReset'],
                     maxZoomIn:0.05};
options[&quot;chartArea&quot;] = {width:'85%',height:'80%'};
options[&quot;hAxis&quot;] = {title: 'Explanatory x',
                     titleTextStyle: {color: '#000000'}};
options[&quot;vAxis&quot;] = {title: 'Response y',
                     titleTextStyle: {color: '#000000'}};
options[&quot;title&quot;] = &quot;Curvilinear Relationship&quot;;
options[&quot;width&quot;] =    550;
options[&quot;height&quot;] =    500;
options[&quot;legend&quot;] = &quot;none&quot;;

    var chart = new google.visualization.ScatterChart(
    document.getElementById('ZoomZoom')
    );
    chart.draw(data,options);
    

}
  
 
// jsDisplayChart
(function() {
var pkgs = window.__gvisPackages = window.__gvisPackages || [];
var callbacks = window.__gvisCallbacks = window.__gvisCallbacks || [];
var chartid = &quot;corechart&quot;;
  
// Manually see if chartid is in pkgs (not all browsers support Array.indexOf)
var i, newPackage = true;
for (i = 0; newPackage &amp;&amp; i &lt; pkgs.length; i++) {
if (pkgs[i] === chartid)
newPackage = false;
}
if (newPackage)
  pkgs.push(chartid);
  
// Add the drawChart function to the global list of callbacks
callbacks.push(drawChartZoomZoom);
})();
function displayChartZoomZoom() {
  var pkgs = window.__gvisPackages = window.__gvisPackages || [];
  var callbacks = window.__gvisCallbacks = window.__gvisCallbacks || [];
  window.clearTimeout(window.__gvisLoad);
  // The timeout is set to 100 because otherwise the container div we are
  // targeting might not be part of the document yet
  window.__gvisLoad = setTimeout(function() {
  var pkgCount = pkgs.length;
  google.load(&quot;visualization&quot;, &quot;1&quot;, { packages:pkgs, callback: function() {
  if (pkgCount != pkgs.length) {
  // Race condition where another setTimeout call snuck in after us; if
  // that call added a package, we must not shift its callback
  return;
}
while (callbacks.length &gt; 0)
callbacks.shift()();
} });
}, 100);
}
 
// jsFooter
&lt;/script&gt;

&lt;!-- jsChart --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.google.com/jsapi?callback=displayChartZoomZoom&quot;&gt;&lt;/script&gt;

&lt;!-- divChart --&gt;

&lt;div id=&quot;ZoomZoom&quot; style=&quot;width: 550; height: 500;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;All we needed was the following code (be sure to add the chunk option &lt;code&gt;results='asis'&lt;/code&gt;):&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;r&quot;&gt;set.seed(2020)
x &amp;lt;- seq(0,100,by=0.5)
y &amp;lt;- (50-x)^2+rnorm(length(x),sd=100)

curvy &amp;lt;- data.frame(x,y)


gvScat &amp;lt;- gvisScatterChart(curvy,
                   options=list(
                     explorer=&amp;quot;{actions: ['dragToZoom',
                     'rightClickToReset'],
                     maxZoomIn:0.05}&amp;quot;,
                     chartArea=&amp;quot;{width:'85%',height:'80%'}&amp;quot;,
                     hAxis=&amp;quot;{title: 'Explanatory x',
                     titleTextStyle: {color: '#000000'}}&amp;quot;,
                     vAxis=&amp;quot;{title: 'Response y',
                     titleTextStyle: {color: '#000000'}}&amp;quot;,
                     title=&amp;quot;Curvilinear Relationship&amp;quot;,
                     width=550, height=500,
                     legend=&amp;quot;none&amp;quot;),
                   chartid=&amp;quot;ZoomZoom&amp;quot;)

print(gvScat,'chart')&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The same approach works in any R Markdown document (including the source document for this Jekyll-powered post).  I will certainly take a closer look at &lt;code&gt;googleVis&lt;/code&gt;:  thanks, Markus!&lt;/p&gt;

</description>
        <pubDate>2014-09-03 22:30:00 +0200</pubDate>
        <link>https://codingclubuc3m.github.io/2014/09/03/google-charts.html</link>
        <guid isPermaLink="true">https://codingclubuc3m.github.io/2014/09/03/google-charts.html</guid>
        
        
        <category>R</category>
        
      </item>
    
  </channel>
</rss>
